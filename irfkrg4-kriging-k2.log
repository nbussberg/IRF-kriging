
> # R version
> R.version.string
[1] "R version 4.3.2 (2023-10-31)"

> ### 00 Load functions
> 
> source(file = "irf-fcn01-sphere-harmonics.R")

> source(file = "irf-fcn02-legendre-polynomials.R")

> source(file = "irf-fcn03-distance.R")

> source(file = "irf-fcn04-covariances.R")

> source(file = "irf-fcn05-MoM-estimator.R")

> source(file = "irf-fcn06-kappa-approx.R")

> source(file = "irf-fcn07-model-estimator.R")

> source(file = "irf-fcn08-kriger.R")

> library(MASS)

> ###  01 Load data
> 
> X.Lmat <- readRDS("data/irfkrg3-kriging-split-k2-sig1-full.Rds")

> train.data <- readRDS("data/irfkrg3-kriging-split-k2-sig1-train.Rds")

> test.data  <- readRDS("data/irfkrg3-kriging-split-k2-sig1-test.Rds")

> X0.train <- train.data$X.0.k2

> Lmat.train <- train.data[, 2:3]

> P.train <- length(X0.train)

> # Load test data
> 
> X0.test <- test.data$X.0.k2

> Lmat.test <- test.data[, 2:3]

> P.test <- length(X0.test)

> ### 02 Set parameters
> 
> H <- 10         # Number of distances at which to estimate

> Hvec <- as.vector(seq(0, 1, by = 1/H))[1:H]

> eps <- 0.10     # use to bin distances in estimation

> # Get distances
> Dvec.train <- Dfun(Lmat.train, P.train)

> ### 03 Estimate kappa
> 
> GN.train <- order.approx(data = X0.train, Lmat.train, Dvec.train, 
+                         Hvec, eps, P.train)

> G.diff <- G.diff.fcn.noadjust(GN.train$G, H, Hvec)

> crit.raw <- criterion.v01(G.diff)

> # original units graph
> pdf(file = paste("graphs/", filename, "-crit-plot.pdf", sep = ""),
+     width = 10, height = 7)

> par(las=1, mar=c(5,6,2,1)+0.1)

> plot(0:6, crit.raw, xlab = "k", ylab = "", cex = 1.5,
+      cex.axis = 1.5, cex.lab = 1.5, pch = 16)

> mtext("S(k)", 2, line=2, cex = 1.5, las=2, at=700)

> dev.off()
RStudioGD 
        2 

> # log units graph
> pdf(file = paste("graphs/", filename, "-crit-plot-log.pdf", sep = ""),
+     width = 10, height = 7) 

> par(las=1, mar=c(5,6,2,1)+0.1)

> plot(0:6, log(crit.raw), xlab = "k", ylab = "", 
+      cex = 1.5, cex.axis = 1.5, cex.lab = 1.5, pch = 16)

> mtext("log(S(k))", 2, line=0.5, cex = 1.5, las=2, at=7)

> dev.off()
RStudioGD 
        2 

> # both version imply kappa-hat is 2
> 
> 
> 
> ###  04 Estimate r and sig using iterative weighted least squares
> 
> # estimate r assuming k=1 (Ord .... [TRUNCATED] 

> b.icf.k1 <- coef(fit.k1)

> print(paste("Estimate for r assuming k=1 is ", b.icf.k1, sep = ""))
[1] "Estimate for r assuming k=1 is 0.888802922440188"

> # estimate r with kappa estimate (k=2)
> fit.k2 <- nls(GN.train$G[,3] ~ rfun.k(r, 2, sig = 1), data = GN.train, 
+               weights = 1/GN.trai .... [TRUNCATED] 

> (b.icf.k2 <- coef(fit.k2))
        r 
0.7142176 

> print(paste("Estimate for r assuming k=2 is ", b.icf.k2, sep = ""))
[1] "Estimate for r assuming k=2 is 0.714217616329826"

> ###  05 Set parameters and estimates for kriging
> 
> r.true <- 0.75

> Dmat.train <- matrix(0,P.train,P.train)

> Dmat.train[upper.tri(Dmat.train,diag = TRUE)] <- Dvec.train

> Dmat.train <- Dmat.train + t(Dmat.train)

> ###  06 Set prelim matrices for IRFk method
> 
> PQinv.k1 <- PQinv.fcn(1, Dmat.train, b.icf.k1, P.train, Lmat.train, 
+                       1, 0)

> PQinv.k2 <- PQinv.fcn(2, Dmat.train, b.icf.k2, P.train, Lmat.train, 
+                       1, 0)

> ###  07 Make predictions
> 
> # IRF kriging 
> 
> X.krig.k1 <- X.krig.k2 <- matrix(0, P.test, 1)

> for (i in 1:P.test) {
+     X.krig.k1[i] <- kriger.icfk(Lmat.test[i,], 1, Lmat.train, P.train, 
+                                 PQinv.k1, X0.train .... [TRUNCATED] 

> # Calculate RMSE 
> 
> k1.rmse <- (sum((X0.test - X.krig.k1)^2) / P.test)^(1/2)

> print(paste("RMSE for kriging using k=1: ", k1.rmse, sep = ""))
[1] "RMSE for kriging using k=1: 10.0311646259899"

> k2.rmse <- (sum((X0.test - X.krig.k2)^2) / P.test)^(1/2)

> print(paste("RMSE for kriging using k=2: ", k2.rmse, sep = ""))
[1] "RMSE for kriging using k=2: 0.0373224095914616"

> # close log
> sink()
